// --- Forward Declarations (Needed for circular type references) ---
// These will be properly defined later in this file or imported if moved fully.
export interface AnyProcedure extends BaseProcedure {} // Placeholder
export interface AnyRouter extends BaseRouter {} // Placeholder

/**
// --- TypeQL Transport & Message Types ---

/** Common structure for request/response correlation */
interface CorrelatedMessage {
    /** Unique ID for correlating requests and responses. */
    id: number | string;
}

// --- Request/Response (Query/Mutation) ---

/** Message sent from Client to Server for a query or mutation. */
export interface ProcedureCallMessage extends CorrelatedMessage {
    type: 'query' | 'mutation';
    /** Path to the procedure (e.g., 'user.get'). */
    path: string;
    /** Input data for the procedure (if any). */
    input?: unknown;
    /** Optional sequence number generated by the client for optimistic updates. */
    clientSeq?: number;
}

/** Represents a successful procedure result from the server. */
interface ProcedureSuccessResult {
    type: 'data';
    /** The data returned by the procedure. */
    data: unknown;
}

/** Represents an error result from the server. */
interface ProcedureErrorResult {
    type: 'error';
    /** Error details. */
    error: {
        message: string;
        code?: string; // e.g., 'BAD_REQUEST', 'UNAUTHORIZED', 'INTERNAL_SERVER_ERROR'
        // path?: string; // Optional path where error occurred
        // stack?: string; // Optional stack trace in dev
    };
}

/** Message sent from Server to Client with the result of a query or mutation. */
export interface ProcedureResultMessage extends CorrelatedMessage {
    result: ProcedureSuccessResult | ProcedureErrorResult;
}

/** Message sent from Server to Client acknowledging a mutation with a clientSeq. */
export interface AckMessage extends CorrelatedMessage {
    type: 'ack';
    // ID should match the original ProcedureCallMessage ID
    /** The client-generated sequence number being acknowledged. */
    clientSeq: number;
    /** The server-generated sequence number assigned to this mutation. */
    serverSeq: number;
}


// --- Subscriptions ---

/** Message sent from Client to Server to start a subscription. */
export interface SubscribeMessage extends CorrelatedMessage {
    type: 'subscription';
    /** Path to the subscription procedure. */
    path: string;
    /** Input data for the subscription (if any). */
    input?: unknown;
}

/** Message sent from Client to Server to stop a subscription. */
export interface UnsubscribeMessage extends CorrelatedMessage {
    type: 'subscriptionStop';
    // ID refers to the original SubscribeMessage ID
}

/** Message sent from Server to Client with data for an active subscription. */
export interface SubscriptionDataMessage extends CorrelatedMessage {
    type: 'subscriptionData';
    // ID refers to the original SubscribeMessage ID
    /** The data payload (e.g., initial state or delta). */
    data: unknown;
    /** Server-generated sequence number for this delta. */
    serverSeq: number;
    /** Optional: Server-generated sequence number of the *previous* delta sent on this subscription. Used for detecting gaps. */
    prevServerSeq?: number;
}

/** Message sent from Server to Client indicating a subscription has ended normally. */
export interface SubscriptionEndMessage extends CorrelatedMessage {
    type: 'subscriptionEnd';
    // ID refers to the original SubscribeMessage ID
}

/** Message sent from Server to Client indicating an error occurred on the subscription. */
export interface SubscriptionErrorMessage extends CorrelatedMessage {
    type: 'subscriptionError';
    // ID refers to the original SubscribeMessage ID
    /** Error details. */
    error: {
        message: string;
        code?: string;
        // path?: string;
    };
}

/** Union of all messages involved in the subscription lifecycle (client->server and server->client). */
export type SubscriptionLifecycleMessage =
    | SubscribeMessage
    | UnsubscribeMessage
    | SubscriptionDataMessage
    | SubscriptionEndMessage
    | SubscriptionErrorMessage;


// --- Recovery ---

/** Message sent from Client to Server to request missing subscription updates. */
export interface RequestMissingMessage extends CorrelatedMessage {
    type: 'request_missing';
    /** ID should correspond to the specific subscription needing recovery. */
    // id: number | string; // Already in CorrelatedMessage
    /** The server sequence number *after* the last confirmed one. */
    fromSeq: number;
    /** The server sequence number of the delta that triggered the gap detection (inclusive). */
    toSeq: number;
}


// --- Transport Interface ---

/** Function to unsubscribe from a subscription. */
export type UnsubscribeFn = () => void;

// Removed SubscriptionHandlers interface as it's replaced by AsyncIterable

// Removed SubscriptionResult type as iterator will yield full messages


/**
 * Interface defining the contract for transport layer adapters in TypeQL.
 * Transport adapters handle the low-level communication.
 */
export interface TypeQLTransport {
    /**
     * Sends a query or mutation request and returns the result.
     * Handles serialization, sending, correlation, and deserialization.
     * @param message The procedure call message.
     * @returns A promise resolving with the procedure result message.
     */
    request(message: ProcedureCallMessage): Promise<ProcedureResultMessage>;

    /**
     * Initiates a subscription and returns an AsyncIterableIterator to consume results.
     * Handles serialization, sending the subscribe message, managing the subscription lifecycle,
     * and yielding data or errors through the iterator.
     * @param message The subscription initiation message.
     * @returns An object containing the AsyncIterableIterator and an unsubscribe function.
     */
    subscribe(message: SubscribeMessage): { // Removed unused TData generic
        /** Async iterator yielding full data or error messages. Completes when the subscription ends. */
        iterator: AsyncIterableIterator<SubscriptionDataMessage | SubscriptionErrorMessage>;
        /** Function to call to explicitly stop the subscription. */
        unsubscribe: UnsubscribeFn;
    };

    // Optional connection status management (similar to previous Transport)
    readonly connected?: boolean;
    onConnectionChange?(handler: (connected: boolean) => void): (() => void) | void;
    connect?(): Promise<void> | void; // Optional connect method
    disconnect?(code?: number, reason?: string): Promise<void> | void; // Optional disconnect method with code/reason
    /**
     * Optional: Registers a callback to be executed when the transport detects a disconnection.
     * @param callback The function to call on disconnect.
     * @returns A function to unregister the callback.
     */
    onDisconnect?: (callback: () => void) => () => void;

    /**
     * Optional: Sends a subscription-related message from the server back to the client.
     * This is primarily used by the request handler's `publish` function.
     * The transport implementation must route the message to the correct client based
     * on the `id` within the message, which corresponds to the original subscription ID.
     * @param message The subscription data, error, or end message.
     */
    send?(message: SubscriptionDataMessage | SubscriptionErrorMessage | SubscriptionEndMessage): void | Promise<void>;

    /**
     * Optional callback called by the transport when an AckMessage is received.
      * Used to confirm optimistic mutations.
      */
     onAckReceived?: (ack: AckMessage) => void;

     /**
      * Optional: Sends a request to the server to re-send deltas for a given sequence range.
      * Used by the OptimisticStore to recover from detected gaps in subscription updates.
      * The transport must handle sending an appropriate message format to the server.
      * @param subscriptionId The ID of the subscription requiring recovery.
      * @param fromSeq The server sequence number *after* the last confirmed one.
      * @param toSeq The server sequence number of the delta that triggered the gap detection.
      */
     requestMissingDeltas?(subscriptionId: number | string, fromSeq: number, toSeq: number): void | Promise<void>;
}


// --- Standard Delta Types ---

/** Represents adding an item to a collection (array). Assumes collection items have an 'id'. */
export interface AddDelta<T extends { id: string }> {
  type: 'add';
  /** The item to add. */
  item: T;
  /** Optional path to the target collection within the state. Defaults to root array. */
  path?: string[];
  /** Optional: Client's temporary ID for correlation during optimistic updates. */
  tempId?: string;
}

/** Represents updating properties of an existing item in a collection. Assumes collection items have an 'id'. */
export interface UpdateDelta<T extends { id: string }> {
  type: 'update';
  /** The ID of the item to update. */
  id: string;
  /** The partial changes to apply. */
  changes: Partial<T>;
  /** Optional path to the target collection within the state. Defaults to root array. */
  path?: string[];
}

/** Represents removing an item from a collection. Assumes collection items have an 'id'. */
export interface RemoveDelta {
  type: 'remove';
  /** The ID of the item to remove. */
  id: string;
  /** Optional path to the target collection within the state. Defaults to root array. */
  path?: string[];
}

/** Represents replacing the entire state or a sub-part of it. */
export interface ReplaceDelta<S> {
  type: 'replace';
  /** The new state or sub-state. */
  state: S;
  /** Optional path to the target location within the state. Defaults to root. */
  path?: string[];
}

/** Represents moving an item within or between collections. Assumes items have an 'id'. */
export interface MoveDelta {
  type: 'move';
  /** The ID of the item to move. */
  id: string;
  /** The source path (JSON Pointer) of the item. */
  fromPath: string;
  /** The target path (JSON Pointer) where the item should be moved. */
  toPath: string;
  /** Optional: Index or key within the target path. */
  index?: number | string;
}

/** Represents applying a JSON Patch (RFC 6902) to the state or a sub-part. */
export interface PatchDelta {
  type: 'patch';
  /** An array of JSON Patch operations. */
  patch: { op: string; path: string; value?: any; from?: string }[];
  /** Optional path to the target location within the state. Defaults to root. */
  path?: string[];
}


/**
 * A union type for common standard delta operations, primarily for collections of items with an 'id'.
 * Can be extended by applications with custom delta types.
 */
export type StandardDelta<T extends { id: string }, S = any> =
  | AddDelta<T>
  | UpdateDelta<T>
  | RemoveDelta
  | ReplaceDelta<S>
  | MoveDelta // Added MoveDelta
  | PatchDelta; // Added PatchDelta


// --- Standard Operation Types (for Client Actions) ---

/** Represents a client operation to add an item optimistically. */
export interface AddOperation<T extends { id: string }> {
    type: 'add';
    /** The partial item data (server typically assigns final ID and other fields). */
    item: Partial<T>;
    /** Client-generated temporary ID for optimistic updates. */
    tempId: string;
    /** Optional path to the target collection within the state. */
    path?: string[];
}

/** Represents a client operation to update an item optimistically. */
export interface UpdateOperation<T extends { id: string }> {
    type: 'update';
    /** The ID of the item to update. */
    id: string;
    /** The partial changes to apply. */
    changes: Partial<T>;
    /** Optional path to the target collection within the state. */
    path?: string[];
}

/** Represents a client operation to remove an item optimistically. */
export interface RemoveOperation {
    type: 'remove';
    /** The ID of the item to remove. */
    id: string;
    /** Optional path to the target collection within the state. */
    path?: string[];
}

/** Represents a client operation to move an item optimistically. */
export interface MoveOperation {
    type: 'move';
    /** The ID of the item to move. */
    id: string;
    /** The source path (JSON Pointer) of the item. */
    fromPath: string;
    /** The target path (JSON Pointer) where the item should be moved. */
    toPath: string;
    /** Optional: Index or key within the target path. */
    index?: number | string;
}

/**
 * A union type for common standard client operations intended for optimistic updates.
 * These operations are typically converted into StandardDelta for local application and sending to the server.
 */
export type StandardOperation<T extends { id: string }> =
  | AddOperation<T>
  | UpdateOperation<T>
  | RemoveOperation
  | MoveOperation; // Added MoveOperation


// --- Core Procedure & Router Types (Moved from server/procedure & server/router) ---

/** Base context object passed to resolvers/subscriptions */
export type ProcedureContext = Record<string, unknown>;

/** Base interface for any procedure definition */
export interface BaseProcedureDef {
    type: 'query' | 'mutation' | 'subscription';
    inputSchema?: any; // Use any for base type, specific procedures will refine
    outputSchema?: any;
    subscriptionOutputSchema?: any;
    resolver?: (...args: any[]) => any;
    subscriptionResolver?: (...args: any[]) => any;
}

/** Marker type for any procedure */
export interface BaseProcedure {
    _def: BaseProcedureDef;
}

/** Record map of procedures or nested routers */
export type ProcedureRouterRecord = Record<string, AnyProcedure | AnyRouter>;

/** Base internal definition of a router */
export interface BaseRouterDef {
    router: true;
    procedures: ProcedureRouterRecord;
}

/** Represents any router instance */
export interface BaseRouter {
    _def: BaseRouterDef;
}


// --- Custom Error Type ---

/** Custom error class for TypeQL client-side errors. */
export class TypeQLClientError extends Error {
  // Explicitly include undefined for exactOptionalPropertyTypes compatibility
  public readonly code?: string | undefined;

  constructor(message: string, code?: string | undefined) {
    super(message);
    this.name = 'TypeQLClientError';
    this.code = code;
    // Ensure prototype chain is correct
    Object.setPrototypeOf(this, TypeQLClientError.prototype);
  }
}